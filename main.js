/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LoglinkPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  token: ""
};
var LoglinkSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Settings for Loglink plugin" });
    containerEl.createEl("p", { text: "LogLink is a service that allows you to send messages to Obsidian from Telegram." });
    containerEl.createEl("p", { text: "Full instructions for setting up LogLink are available at:" });
    containerEl.createEl("a", { text: "https://loglink.it", href: "https://loglink.it" });
    containerEl.createEl("p", { text: "" });
    new import_obsidian.Setting(containerEl).setName("Token").setDesc("Enter the token you received from the LogLink Telegram bot here").addText(
      (text) => text.setPlaceholder("telegramabcdefgh123456").setValue(this.plugin.settings.token).onChange(async (value) => {
        this.plugin.settings.token = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
async function loadRemoteData(userID) {
  let remoteAppURL = "https://api.loglink.it/";
  let localAppURL = "http://127.0.0.1:5010/";
  let appURL = remoteAppURL;
  let endpoint = appURL + "get_new_messages/";
  let results_array = [];
  console.log(endpoint);
  let object_to_send = {
    "user_id": userID,
    "plugin_version": "0.2.1"
  };
  let response = await fetch(endpoint, {
    method: "POST",
    headers: {
      "Accept": "application/json",
      "Content-Type": "application/json"
    },
    body: JSON.stringify(object_to_send)
  });
  let data = await response.json();
  let status = await response.status;
  if (status === 200) {
    let messages = data.messages.contents;
    messages.forEach(function(item, index) {
      results_array.push(item["contents"]);
    });
  } else {
    results_array.push("There was an error fetching your data from LogLink. Error code was " + status + ".");
    results_array.push(data.message);
    console.log(data);
  }
  return results_array;
}
var LoglinkPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new LoglinkSettingTab(this.app, this));
    this.addCommand({
      id: "sample-editor-command",
      name: "Get data from LogLink",
      editorCallback: async (editor, view) => {
        if (this.settings.token === "") {
          new import_obsidian.Notice("\u274C You haven't entered a LogLink token. Please enter a token in the settings.");
          return;
        }
        new import_obsidian.Notice("\u267B\uFE0E Fetching data from LogLink... with token " + this.settings.token);
        let results = await loadRemoteData(this.settings.token);
        new import_obsidian.Notice("\u2705 Data fetched from LogLink");
        let base_message = "Inserted from [[LogLink]] on " + new Date().toLocaleString() + ":\n";
        let fullmessage = base_message;
        results.forEach(function(item, index) {
          fullmessage = fullmessage + "- " + item + "\n";
        });
        editor.replaceSelection(fullmessage);
      }
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5pbnRlcmZhY2UgTG9nbGlua1NldHRpbmdzIHtcblx0dG9rZW46IHN0cmluZztcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogTG9nbGlua1NldHRpbmdzID0ge1xuXHR0b2tlbjogJydcbn1cblxuY2xhc3MgTG9nbGlua1NldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcblx0cHJpdmF0ZSBwbHVnaW46IFBsdWdpbjtcblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBQbHVnaW4pIHtcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdH1cblxuXHRkaXNwbGF5KCk6IHZvaWQge1xuXHRcdGxldCB7Y29udGFpbmVyRWx9ID0gdGhpcztcblxuXHRcdGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2gxJywge3RleHQ6ICdTZXR0aW5ncyBmb3IgTG9nbGluayBwbHVnaW4nfSk7XG5cblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgncCcsIHt0ZXh0OiAnTG9nTGluayBpcyBhIHNlcnZpY2UgdGhhdCBhbGxvd3MgeW91IHRvIHNlbmQgbWVzc2FnZXMgdG8gT2JzaWRpYW4gZnJvbSBUZWxlZ3JhbS4nfSk7XG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ3AnLCB7dGV4dDogJ0Z1bGwgaW5zdHJ1Y3Rpb25zIGZvciBzZXR0aW5nIHVwIExvZ0xpbmsgYXJlIGF2YWlsYWJsZSBhdDonfSk7XG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2EnLCB7dGV4dDogJ2h0dHBzOi8vbG9nbGluay5pdCcsIGhyZWY6ICdodHRwczovL2xvZ2xpbmsuaXQnfSk7XG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ3AnLCB7dGV4dDogJyd9KTtcblxuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnVG9rZW4nKVxuXHRcdFx0LnNldERlc2MoJ0VudGVyIHRoZSB0b2tlbiB5b3UgcmVjZWl2ZWQgZnJvbSB0aGUgTG9nTGluayBUZWxlZ3JhbSBib3QgaGVyZScpXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCd0ZWxlZ3JhbWFiY2RlZmdoMTIzNDU2Jylcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnRva2VuKVxuXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy50b2tlbiA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KVxuXHRcdFx0KTtcblx0XHR9XG5cblx0fVxuXG5cbi8qIGZ1bmN0aW9uIHRvIGZldGNoIGRhdGEgZnJvbSBMb2dMaW5rICovXG5hc3luYyBmdW5jdGlvbiBsb2FkUmVtb3RlRGF0YSh1c2VySUQ6IHN0cmluZykge1xuXG5cdC8vIFNldCB0aGUgVVJMIHRvIGVpdGhlciB0aGUgZGVmYXVsdCBvciB0aGUgdXNlcidzIGN1c3RvbSBVUkxcblx0bGV0IHJlbW90ZUFwcFVSTCA9ICdodHRwczovL2FwaS5sb2dsaW5rLml0Lyc7XG5cdGxldCBsb2NhbEFwcFVSTCA9ICdodHRwOi8vMTI3LjAuMC4xOjUwMTAvJ1xuXHRsZXQgYXBwVVJMID0gcmVtb3RlQXBwVVJMO1xuXHRsZXQgZW5kcG9pbnQgPSBhcHBVUkwgKyAnZ2V0X25ld19tZXNzYWdlcy8nO1xuXG5cdC8vIENyZXRlIHRoZSByZXN1bHRzIGFycmF5LCB3aGljaCB3ZSB3aWxsIHVzZSB0byByZXR1cm4gdGhlIHJlc3BvbnNlc1xuXHRsZXQgcmVzdWx0c19hcnJheSA9IFtdO1xuXG5cdGNvbnNvbGUubG9nKGVuZHBvaW50KTtcblxuXHRsZXQgb2JqZWN0X3RvX3NlbmQgPSB7XG5cdFx0J3VzZXJfaWQnOiB1c2VySUQsXG5cdFx0J3BsdWdpbl92ZXJzaW9uJzogJzAuMi4xJ1xuXHR9XG5cblx0Ly8gU2VuZCB0aGUgcmVxdWVzdCBpbiBKU09OIGZvcm1hdCB0byB0aGUgZW5kcG9pbnRcblx0bGV0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goZW5kcG9pbnQsIHtcblx0XHRtZXRob2Q6ICdQT1NUJyxcblx0XHRoZWFkZXJzOiB7XG5cdFx0XHQnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuXHRcdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuXHRcdH0sXG5cdFx0Ym9keTogSlNPTi5zdHJpbmdpZnkob2JqZWN0X3RvX3NlbmQpXG5cdH0pO1xuXG5cdGxldCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXHRsZXQgc3RhdHVzID0gYXdhaXQgcmVzcG9uc2Uuc3RhdHVzO1xuXG5cdGlmIChzdGF0dXMgPT09IDIwMCkge1xuXHRcdGxldCBtZXNzYWdlcyA9IGRhdGEubWVzc2FnZXMuY29udGVudHM7XG5cdFx0bWVzc2FnZXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcblx0XHRcdHJlc3VsdHNfYXJyYXkucHVzaChpdGVtWydjb250ZW50cyddKTtcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRyZXN1bHRzX2FycmF5LnB1c2goXCJUaGVyZSB3YXMgYW4gZXJyb3IgZmV0Y2hpbmcgeW91ciBkYXRhIGZyb20gTG9nTGluay4gRXJyb3IgY29kZSB3YXMgXCIgKyBzdGF0dXMgKyBcIi5cIik7XG5cdFx0cmVzdWx0c19hcnJheS5wdXNoKGRhdGEubWVzc2FnZSlcblx0XHRjb25zb2xlLmxvZyhkYXRhKTtcblx0fVxuXG5cdHJldHVybiByZXN1bHRzX2FycmF5O1xufVxuXG5cblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2dsaW5rUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblx0c2V0dGluZ3M6IExvZ2xpbmtTZXR0aW5ncztcblxuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblx0XHRcblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IExvZ2xpbmtTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XG5cblx0XHRcblx0XHQvLyBUaGlzIGFkZHMgYW4gZWRpdG9yIGNvbW1hbmQgdGhhdCBjYW4gcGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvbiB0aGUgY3VycmVudCBlZGl0b3IgaW5zdGFuY2Vcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICdzYW1wbGUtZWRpdG9yLWNvbW1hbmQnLFxuXHRcdFx0bmFtZTogJ0dldCBkYXRhIGZyb20gTG9nTGluaycsXG5cdFx0XHRlZGl0b3JDYWxsYmFjazogYXN5bmMgKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcblxuXHRcdFx0XHQvLyBDaGVjayBpZiB0aGUgdXNlciBoYXMgZW50ZXJlZCBhIHRva2VuXG5cdFx0XHRcdGlmICh0aGlzLnNldHRpbmdzLnRva2VuID09PSAnJykge1xuXHRcdFx0XHRcdG5ldyBOb3RpY2UoXCJcdTI3NEMgWW91IGhhdmVuJ3QgZW50ZXJlZCBhIExvZ0xpbmsgdG9rZW4uIFBsZWFzZSBlbnRlciBhIHRva2VuIGluIHRoZSBzZXR0aW5ncy5cIilcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRuZXcgTm90aWNlKFwiXHUyNjdCXHVGRTBFIEZldGNoaW5nIGRhdGEgZnJvbSBMb2dMaW5rLi4uIHdpdGggdG9rZW4gXCIgKyB0aGlzLnNldHRpbmdzLnRva2VuKVxuXG5cdFx0XHRcdGxldCByZXN1bHRzID0gYXdhaXQgbG9hZFJlbW90ZURhdGEodGhpcy5zZXR0aW5ncy50b2tlbik7XG5cdFx0XHRcdG5ldyBOb3RpY2UgKFwiXHUyNzA1IERhdGEgZmV0Y2hlZCBmcm9tIExvZ0xpbmtcIilcblxuXHRcdFx0XHQvLyBGb3JtYXQgdGhlIG1lc3NhZ2Vcblx0XHRcdFx0bGV0IGJhc2VfbWVzc2FnZSA9IFwiSW5zZXJ0ZWQgZnJvbSBbW0xvZ0xpbmtdXSBvbiBcIiArIG5ldyBEYXRlKCkudG9Mb2NhbGVTdHJpbmcoKSArIFwiOlxcblwiXG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBHbyB0aHJvdWdoIGVhY2ggbWVzc2FnZSBhbmQgYWRkIGl0IHRvIHRoZSBiYXNlIG1lc3NhZ2Ugd2l0aCBhIC0gYXQgdGhlIHN0YXJ0XG5cdFx0XHRcdGxldCBmdWxsbWVzc2FnZSA9IGJhc2VfbWVzc2FnZVxuXHRcdFx0XHRyZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG5cdFx0XHRcdFx0ZnVsbG1lc3NhZ2UgPSBmdWxsbWVzc2FnZSArIFwiLSBcIiArIGl0ZW0gKyBcIlxcblwiXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKGZ1bGxtZXNzYWdlKVxuXHRcdFx0XHRcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIFdoZW4gcmVnaXN0ZXJpbmcgaW50ZXJ2YWxzLCB0aGlzIGZ1bmN0aW9uIHdpbGwgYXV0b21hdGljYWxseSBjbGVhciB0aGUgaW50ZXJ2YWwgd2hlbiB0aGUgcGx1Z2luIGlzIGRpc2FibGVkLlxuXHRcdHRoaXMucmVnaXN0ZXJJbnRlcnZhbCh3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4gY29uc29sZS5sb2coJ3NldEludGVydmFsJyksIDUgKiA2MCAqIDEwMDApKTtcblx0fVxuXG5cdG9udW5sb2FkKCkge1xuXG5cdH1cblxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XG5cdH1cblxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcblx0fVxufVxuXG5jbGFzcyBTYW1wbGVNb2RhbCBleHRlbmRzIE1vZGFsIHtcblx0Y29uc3RydWN0b3IoYXBwOiBBcHApIHtcblx0XHRzdXBlcihhcHApO1xuXHR9XG5cblx0b25PcGVuKCkge1xuXHRcdGNvbnN0IHtjb250ZW50RWx9ID0gdGhpcztcblx0XHRjb250ZW50RWwuc2V0VGV4dCgnV29haCEnKTtcblx0fVxuXG5cdG9uQ2xvc2UoKSB7XG5cdFx0Y29uc3Qge2NvbnRlbnRFbH0gPSB0aGlzO1xuXHRcdGNvbnRlbnRFbC5lbXB0eSgpO1xuXHR9XG59XG5cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBNEY7QUFNNUYsSUFBTSxtQkFBb0M7QUFBQSxFQUN6QyxPQUFPO0FBQ1I7QUFFQSxJQUFNLG9CQUFOLGNBQWdDLGlDQUFpQjtBQUFBLEVBR2hELFlBQVksS0FBVSxRQUFnQjtBQUNyQyxVQUFNLEtBQUssTUFBTTtBQUNqQixTQUFLLFNBQVM7QUFBQSxFQUNmO0FBQUEsRUFFQSxVQUFnQjtBQUNmLFFBQUksRUFBQyxZQUFXLElBQUk7QUFFcEIsZ0JBQVksTUFBTTtBQUNsQixnQkFBWSxTQUFTLE1BQU0sRUFBQyxNQUFNLDhCQUE2QixDQUFDO0FBRWhFLGdCQUFZLFNBQVMsS0FBSyxFQUFDLE1BQU0sbUZBQWtGLENBQUM7QUFDcEgsZ0JBQVksU0FBUyxLQUFLLEVBQUMsTUFBTSw2REFBNEQsQ0FBQztBQUM5RixnQkFBWSxTQUFTLEtBQUssRUFBQyxNQUFNLHNCQUFzQixNQUFNLHFCQUFvQixDQUFDO0FBQ2xGLGdCQUFZLFNBQVMsS0FBSyxFQUFDLE1BQU0sR0FBRSxDQUFDO0FBR3BDLFFBQUksd0JBQVEsV0FBVyxFQUNyQixRQUFRLE9BQU8sRUFDZixRQUFR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
